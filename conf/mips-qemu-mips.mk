# -*- makefile -*-
# Generated by genmk.rb, please don't edit!
LINK_BASE = 0x80010000
target_machine=qemu-mips
COMMON_CFLAGS += -march=mips3
COMMON_ASFLAGS += -march=mips3
include $(srcdir)/conf/mips.mk

pkglib_PROGRAMS = kernel.img
kernel_img_SOURCES = kern/$(target_cpu)/startup.S \
	kern/main.c kern/device.c kern/$(target_cpu)/init.c \
	kern/$(target_cpu)/$(target_machine)/init.c 		\
	kern/disk.c kern/dl.c kern/err.c kern/file.c kern/fs.c 		\
	kern/misc.c kern/mm.c kern/term.c 	\
	kern/rescue_parser.c kern/rescue_reader.c \
	kern/list.c  kern/command.c kern/corecmd.c	\
	kern/parser.c kern/partition.c kern/env.c kern/$(target_cpu)/dl.c 	\
	kern/generic/millisleep.c kern/generic/rtc_get_time_ms.c kern/time.c    \
	symlist.c kern/$(target_cpu)/cache.S
MOSTLYCLEANFILES += kernel_img-kern___target_cpu__startup.d kernel_img-kern_main.d kernel_img-kern_device.d kernel_img-kern___target_cpu__init.d kernel_img-kern___target_cpu____target_machine__init.d kernel_img-kern_disk.d kernel_img-kern_dl.d kernel_img-kern_err.d kernel_img-kern_file.d kernel_img-kern_fs.d kernel_img-kern_misc.d kernel_img-kern_mm.d kernel_img-kern_term.d kernel_img-kern_rescue_parser.d kernel_img-kern_rescue_reader.d kernel_img-kern_list.d kernel_img-kern_command.d kernel_img-kern_corecmd.d kernel_img-kern_parser.d kernel_img-kern_partition.d kernel_img-kern_env.d kernel_img-kern___target_cpu__dl.d kernel_img-kern_generic_millisleep.d kernel_img-kern_generic_rtc_get_time_ms.d kernel_img-kern_time.d kernel_img-symlist.d kernel_img-kern___target_cpu__cache.d

kernel_img-kern___target_cpu__startup.o: kern/$(target_cpu)/startup.S $(kern/$(target_cpu)/startup.S_DEPENDENCIES)
	$(TARGET_CC) -Ikern/$(target_cpu) -I$(srcdir)/kern/$(target_cpu) $(TARGET_CPPFLAGS) -DASM_FILE=1 $(TARGET_ASFLAGS) $(kernel_img_ASFLAGS) -DGRUB_FILE=\"kern/$(target_cpu)/startup.S\" -MD -c -o $@ $<

-include kernel_img-kern___target_cpu__startup.d

kernel_img_OBJECTS += kernel_img-kern___target_cpu__startup.o
kernel_img-kern_main.o: kern/main.c $(kern/main.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/main.c\" -MD -c -o $@ $<

-include kernel_img-kern_main.d

kernel_img_OBJECTS += kernel_img-kern_main.o
kernel_img-kern_device.o: kern/device.c $(kern/device.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/device.c\" -MD -c -o $@ $<

-include kernel_img-kern_device.d

kernel_img_OBJECTS += kernel_img-kern_device.o
kernel_img-kern___target_cpu__init.o: kern/$(target_cpu)/init.c $(kern/$(target_cpu)/init.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern/$(target_cpu) -I$(srcdir)/kern/$(target_cpu) $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/$(target_cpu)/init.c\" -MD -c -o $@ $<

-include kernel_img-kern___target_cpu__init.d

kernel_img_OBJECTS += kernel_img-kern___target_cpu__init.o
kernel_img-kern___target_cpu____target_machine__init.o: kern/$(target_cpu)/$(target_machine)/init.c $(kern/$(target_cpu)/$(target_machine)/init.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern/$(target_cpu)/$(target_machine) -I$(srcdir)/kern/$(target_cpu)/$(target_machine) $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/$(target_cpu)/$(target_machine)/init.c\" -MD -c -o $@ $<

-include kernel_img-kern___target_cpu____target_machine__init.d

kernel_img_OBJECTS += kernel_img-kern___target_cpu____target_machine__init.o
kernel_img-kern_disk.o: kern/disk.c $(kern/disk.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/disk.c\" -MD -c -o $@ $<

-include kernel_img-kern_disk.d

kernel_img_OBJECTS += kernel_img-kern_disk.o
kernel_img-kern_dl.o: kern/dl.c $(kern/dl.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/dl.c\" -MD -c -o $@ $<

-include kernel_img-kern_dl.d

kernel_img_OBJECTS += kernel_img-kern_dl.o
kernel_img-kern_err.o: kern/err.c $(kern/err.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/err.c\" -MD -c -o $@ $<

-include kernel_img-kern_err.d

kernel_img_OBJECTS += kernel_img-kern_err.o
kernel_img-kern_file.o: kern/file.c $(kern/file.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/file.c\" -MD -c -o $@ $<

-include kernel_img-kern_file.d

kernel_img_OBJECTS += kernel_img-kern_file.o
kernel_img-kern_fs.o: kern/fs.c $(kern/fs.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/fs.c\" -MD -c -o $@ $<

-include kernel_img-kern_fs.d

kernel_img_OBJECTS += kernel_img-kern_fs.o
kernel_img-kern_misc.o: kern/misc.c $(kern/misc.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/misc.c\" -MD -c -o $@ $<

-include kernel_img-kern_misc.d

kernel_img_OBJECTS += kernel_img-kern_misc.o
kernel_img-kern_mm.o: kern/mm.c $(kern/mm.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/mm.c\" -MD -c -o $@ $<

-include kernel_img-kern_mm.d

kernel_img_OBJECTS += kernel_img-kern_mm.o
kernel_img-kern_term.o: kern/term.c $(kern/term.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/term.c\" -MD -c -o $@ $<

-include kernel_img-kern_term.d

kernel_img_OBJECTS += kernel_img-kern_term.o
kernel_img-kern_rescue_parser.o: kern/rescue_parser.c $(kern/rescue_parser.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/rescue_parser.c\" -MD -c -o $@ $<

-include kernel_img-kern_rescue_parser.d

kernel_img_OBJECTS += kernel_img-kern_rescue_parser.o
kernel_img-kern_rescue_reader.o: kern/rescue_reader.c $(kern/rescue_reader.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/rescue_reader.c\" -MD -c -o $@ $<

-include kernel_img-kern_rescue_reader.d

kernel_img_OBJECTS += kernel_img-kern_rescue_reader.o
kernel_img-kern_list.o: kern/list.c $(kern/list.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/list.c\" -MD -c -o $@ $<

-include kernel_img-kern_list.d

kernel_img_OBJECTS += kernel_img-kern_list.o
kernel_img-kern_command.o: kern/command.c $(kern/command.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/command.c\" -MD -c -o $@ $<

-include kernel_img-kern_command.d

kernel_img_OBJECTS += kernel_img-kern_command.o
kernel_img-kern_corecmd.o: kern/corecmd.c $(kern/corecmd.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/corecmd.c\" -MD -c -o $@ $<

-include kernel_img-kern_corecmd.d

kernel_img_OBJECTS += kernel_img-kern_corecmd.o
kernel_img-kern_parser.o: kern/parser.c $(kern/parser.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/parser.c\" -MD -c -o $@ $<

-include kernel_img-kern_parser.d

kernel_img_OBJECTS += kernel_img-kern_parser.o
kernel_img-kern_partition.o: kern/partition.c $(kern/partition.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/partition.c\" -MD -c -o $@ $<

-include kernel_img-kern_partition.d

kernel_img_OBJECTS += kernel_img-kern_partition.o
kernel_img-kern_env.o: kern/env.c $(kern/env.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/env.c\" -MD -c -o $@ $<

-include kernel_img-kern_env.d

kernel_img_OBJECTS += kernel_img-kern_env.o
kernel_img-kern___target_cpu__dl.o: kern/$(target_cpu)/dl.c $(kern/$(target_cpu)/dl.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern/$(target_cpu) -I$(srcdir)/kern/$(target_cpu) $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/$(target_cpu)/dl.c\" -MD -c -o $@ $<

-include kernel_img-kern___target_cpu__dl.d

kernel_img_OBJECTS += kernel_img-kern___target_cpu__dl.o
kernel_img-kern_generic_millisleep.o: kern/generic/millisleep.c $(kern/generic/millisleep.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern/generic -I$(srcdir)/kern/generic $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/generic/millisleep.c\" -MD -c -o $@ $<

-include kernel_img-kern_generic_millisleep.d

kernel_img_OBJECTS += kernel_img-kern_generic_millisleep.o
kernel_img-kern_generic_rtc_get_time_ms.o: kern/generic/rtc_get_time_ms.c $(kern/generic/rtc_get_time_ms.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern/generic -I$(srcdir)/kern/generic $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/generic/rtc_get_time_ms.c\" -MD -c -o $@ $<

-include kernel_img-kern_generic_rtc_get_time_ms.d

kernel_img_OBJECTS += kernel_img-kern_generic_rtc_get_time_ms.o
kernel_img-kern_time.o: kern/time.c $(kern/time.c_DEPENDENCIES)
	$(TARGET_CC) -Ikern -I$(srcdir)/kern $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"kern/time.c\" -MD -c -o $@ $<

-include kernel_img-kern_time.d

kernel_img_OBJECTS += kernel_img-kern_time.o
kernel_img-symlist.o: symlist.c $(symlist.c_DEPENDENCIES)
	$(TARGET_CC) -I. -I$(srcdir)/. $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(kernel_img_CFLAGS) -DGRUB_FILE=\"symlist.c\" -MD -c -o $@ $<

-include kernel_img-symlist.d

kernel_img_OBJECTS += kernel_img-symlist.o
kernel_img-kern___target_cpu__cache.o: kern/$(target_cpu)/cache.S $(kern/$(target_cpu)/cache.S_DEPENDENCIES)
	$(TARGET_CC) -Ikern/$(target_cpu) -I$(srcdir)/kern/$(target_cpu) $(TARGET_CPPFLAGS) -DASM_FILE=1 $(TARGET_ASFLAGS) $(kernel_img_ASFLAGS) -DGRUB_FILE=\"kern/$(target_cpu)/cache.S\" -MD -c -o $@ $<

-include kernel_img-kern___target_cpu__cache.d

kernel_img_OBJECTS += kernel_img-kern___target_cpu__cache.o
kernel_img_CFLAGS = $(COMMON_CFLAGS)
kernel_img_ASFLAGS = $(COMMON_ASFLAGS)
kernel_img_LDFLAGS = $(COMMON_LDFLAGS) -Wl,-N,-S,-Ttext,$(LINK_BASE),-Bstatic
kernel_img_FORMAT = binary

# For serial.mod.
pkglib_MODULES += serial.mod
serial_mod_SOURCES = term/serial.c

clean-module-serial.mod.1:
	rm -f serial.mod mod-serial.o mod-serial.c pre-serial.o serial_mod-term_serial.o und-serial.lst

CLEAN_MODULE_TARGETS += clean-module-serial.mod.1

clean-module-serial.mod-symbol.1:
	rm -f def-serial.lst

CLEAN_MODULE_TARGETS += clean-module-serial.mod-symbol.1
DEFSYMFILES += def-serial.lst
mostlyclean-module-serial.mod.1:
	rm -f serial_mod-term_serial.d

MOSTLYCLEAN_MODULE_TARGETS += mostlyclean-module-serial.mod.1
UNDSYMFILES += und-serial.lst

ifeq ($(TARGET_NO_MODULES), yes)
serial.mod: pre-serial.o $(TARGET_OBJ2ELF)
	-rm -f $@
	$(TARGET_CC) $(serial_mod_LDFLAGS) $(TARGET_LDFLAGS) -Wl,-r,-d -o $@ pre-serial.o
	if test ! -z "$(TARGET_OBJ2ELF)"; then ./$(TARGET_OBJ2ELF) $@ || (rm -f $@; exit 1); fi
	if test x$(TARGET_NO_STRIP) != xyes ; then $(STRIP) --strip-unneeded -K grub_mod_init -K grub_mod_fini -K _grub_mod_init -K _grub_mod_fini -R .note -R .comment $@; fi
else
ifneq ($(TARGET_APPLE_CC),1)
serial.mod: pre-serial.o mod-serial.o $(TARGET_OBJ2ELF)
	-rm -f $@
	$(TARGET_CC) $(serial_mod_LDFLAGS) $(TARGET_LDFLAGS) -Wl,-r,-d -o $@ pre-serial.o mod-serial.o
	if test ! -z "$(TARGET_OBJ2ELF)"; then ./$(TARGET_OBJ2ELF) $@ || (rm -f $@; exit 1); fi
	if test x$(TARGET_NO_STRIP) != xyes ; then $(STRIP) --strip-unneeded -K grub_mod_init -K grub_mod_fini -K _grub_mod_init -K _grub_mod_fini -R .note -R .comment $@; fi
else
serial.mod: pre-serial.o mod-serial.o $(TARGET_OBJ2ELF)
	-rm -f $@
	-rm -f $@.bin
	$(TARGET_CC) $(serial_mod_LDFLAGS) $(TARGET_LDFLAGS) -Wl,-r,-d -o $@.bin pre-serial.o mod-serial.o
	$(OBJCONV) -f$(TARGET_MODULE_FORMAT) -nr:_grub_mod_init:grub_mod_init -nr:_grub_mod_fini:grub_mod_fini -wd1106 -ew2030 -ew2050 -nu -nd $@.bin $@
	-rm -f $@.bin
endif
endif

pre-serial.o: $(serial_mod_DEPENDENCIES) serial_mod-term_serial.o
	-rm -f $@
	$(TARGET_CC) $(serial_mod_LDFLAGS) $(TARGET_LDFLAGS) -Wl,-r,-d -o $@ serial_mod-term_serial.o

mod-serial.o: mod-serial.c
	$(TARGET_CC) $(TARGET_CPPFLAGS) $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -DGRUB_FILE=\"mod-serial.c\" -c -o $@ $<

mod-serial.c: $(builddir)/moddep.lst $(srcdir)/genmodsrc.sh
	sh $(srcdir)/genmodsrc.sh 'serial' $< > $@ || (rm -f $@; exit 1)

ifneq ($(TARGET_APPLE_CC),1)
def-serial.lst: pre-serial.o
	$(NM) -g --defined-only -P -p $< | sed 's/^\([^ ]*\).*/\1 serial/' > $@
else
def-serial.lst: pre-serial.o
	$(NM) -g -P -p $< | grep -E '^[a-zA-Z0-9_]* [TDS]'  | sed 's/^\([^ ]*\).*/\1 serial/' > $@
endif

und-serial.lst: pre-serial.o
	echo 'serial' > $@
	$(NM) -u -P -p $< | cut -f1 -d' ' >> $@

serial_mod-term_serial.o: term/serial.c $(term/serial.c_DEPENDENCIES)
	$(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -DGRUB_FILE=\"term/serial.c\" -MD -c -o $@ $<
-include serial_mod-term_serial.d

clean-module-serial_mod-term_serial-extra.1:
	rm -f cmd-serial_mod-term_serial.lst fs-serial_mod-term_serial.lst partmap-serial_mod-term_serial.lst handler-serial_mod-term_serial.lst parttool-serial_mod-term_serial.lst video-serial_mod-term_serial.lst terminal-serial_mod-term_serial.lst

CLEAN_MODULE_TARGETS += clean-module-serial_mod-term_serial-extra.1

COMMANDFILES += cmd-serial_mod-term_serial.lst
FSFILES += fs-serial_mod-term_serial.lst
PARTTOOLFILES += parttool-serial_mod-term_serial.lst
PARTMAPFILES += partmap-serial_mod-term_serial.lst
HANDLERFILES += handler-serial_mod-term_serial.lst
TERMINALFILES += terminal-serial_mod-term_serial.lst
VIDEOFILES += video-serial_mod-term_serial.lst

cmd-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) gencmdlist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/gencmdlist.sh serial > $@ || (rm -f $@; exit 1)

fs-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) genfslist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  -DGRUB_LST_GENERATOR $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/genfslist.sh serial > $@ || (rm -f $@; exit 1)

parttool-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) genparttoollist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/genparttoollist.sh serial > $@ || (rm -f $@; exit 1)

partmap-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) genpartmaplist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  -DGRUB_LST_GENERATOR $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/genpartmaplist.sh serial > $@ || (rm -f $@; exit 1)

handler-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) genhandlerlist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/genhandlerlist.sh serial > $@ || (rm -f $@; exit 1)

terminal-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) genterminallist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/genterminallist.sh serial > $@ || (rm -f $@; exit 1)

video-serial_mod-term_serial.lst: term/serial.c $(term/serial.c_DEPENDENCIES) genvideolist.sh
	set -e; 	  $(TARGET_CC) -Iterm -I$(srcdir)/term $(TARGET_CPPFLAGS)  -DGRUB_LST_GENERATOR $(TARGET_CFLAGS) $(serial_mod_CFLAGS) -E $< 	  | sh $(srcdir)/genvideolist.sh serial > $@ || (rm -f $@; exit 1)

serial_mod_CFLAGS = $(COMMON_CFLAGS)
serial_mod_LDFLAGS = $(COMMON_LDFLAGS)
CLEANFILES += kernel.img $(kernel_img_OBJECTS)
ifeq ($(kernel_img_RELOCATABLE),yes)
kernel.img: $(kernel_img_DEPENDENCIES) $(kernel_img_OBJECTS)
	$(TARGET_CC) -Wl,-r,-d -o $@ $(kernel_img_OBJECTS) $(TARGET_LDFLAGS) $(kernel_img_LDFLAGS)
	if test x$(TARGET_NO_STRIP) != xyes ; then $(STRIP) --strip-unneeded -K start -R .note -R .comment $@; fi
else
kernel.img: $(kernel_img_DEPENDENCIES) $(kernel_img_OBJECTS)
	$(TARGET_CC) -o $@ $(kernel_img_OBJECTS) $(TARGET_LDFLAGS) $(kernel_img_LDFLAGS)
	if test x$(TARGET_NO_STRIP) != xyes ; then $(STRIP) -R .rel.dyn -R .reginfo -R .note -R .comment $@; fi
endif

