Description: Support mdraid 1.x
Author: Robert Millan <rmh@debian.org>
Forwarded: not-needed, patch from upstream
Last-Update: 2010-11-04

--- a/disk/mdraid_linux.c
+++ b/disk/mdraid_linux.c
@@ -254,6 +254,9 @@ grub_mdraid_detect_09 (grub_disk_addr_t
       sb->level != 5 && sb->level != 6 && sb->level != 10)
     return grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
 		       "unsupported RAID level: %d", sb->level);
+  if (sb->this_disk.number == 0xffff || sb->this_disk.number == 0xfffe)
+    return grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
+		       "spares aren't implemented");
 
   array->name = NULL;
   array->number = sb->md_minor;
@@ -328,12 +331,13 @@ grub_mdraid_detect_1x (grub_disk_t disk,
   array->total_devs = grub_le_to_cpu32 (real_sb->raid_disks);
   array->disk_size = grub_le_to_cpu64 (real_sb->size);
   array->chunk_size = grub_le_to_cpu32 (real_sb->chunksize);
-  if (grub_le_to_cpu32 (real_sb->dev_number) <
+  if (grub_le_to_cpu32 (real_sb->dev_number) >=
       grub_le_to_cpu32 (real_sb->max_dev))
-    array->index = grub_le_to_cpu16
-      (real_sb->dev_roles[grub_le_to_cpu32 (real_sb->dev_number)]);
-  else
-    array->index = 0xffff;  /* disk will be later not used! */
+    return grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
+		       "spares aren't implemented");
+
+  array->index = grub_le_to_cpu16
+    (real_sb->dev_roles[grub_le_to_cpu32 (real_sb->dev_number)]);
   array->uuid_len = 16;
   array->uuid = grub_malloc (16);
   if (!array->uuid)

--- a/disk/raid.c
+++ b/disk/raid.c
@@ -97,10 +97,10 @@ grub_raid_memberlist (grub_disk_t disk)
   unsigned int i;
 
   for (i = 0; i < array->total_devs; i++)
-    if (array->device[i])
+    if (array->members[i].device)
       {
         tmp = grub_malloc (sizeof (*tmp));
-        tmp->disk = array->device[i];
+        tmp->disk = array->members[i].device;
         tmp->next = list;
         list = tmp;
       }
@@ -248,13 +248,13 @@ grub_raid_read (grub_disk_t disk, grub_d
                 k = disknr;
                 for (j = 0; j < far; j++)
                   {
-                    if (array->device[k])
+                    if (array->members[k].device)
                       {
                         if (grub_errno == GRUB_ERR_READ_ERROR)
                           grub_errno = GRUB_ERR_NONE;
 
-                        err = grub_disk_read (array->device[k],
-                                              array->start_sector[k] +
+                        err = grub_disk_read (array->members[k].device,
+                                              array->members[k].start_sector +
                                                 read_sector + j * far_ofs + b,
                                               0,
                                               read_size << GRUB_DISK_SECTOR_BITS,
@@ -360,14 +360,14 @@ grub_raid_read (grub_disk_t disk, grub_d
               read_size = size;
 
             e = 0;
-            if (array->device[disknr])
+            if (array->members[disknr].device)
               {
                 /* Reset read error.  */
                 if (grub_errno == GRUB_ERR_READ_ERROR)
                   grub_errno = GRUB_ERR_NONE;
 
-                err = grub_disk_read (array->device[disknr],
-                                      array->start_sector[disknr] +
+                err = grub_disk_read (array->members[disknr].device,
+                                      array->members[disknr].start_sector +
                                         read_sector + b, 0,
                                       read_size << GRUB_DISK_SECTOR_BITS,
                                       buf);
@@ -492,6 +492,21 @@ insert_array (grub_disk_t disk, struct g
 
         /* Do some checks before adding the device to the array.  */
 
+	if (new_array->index >= array->allocated_devs)
+	  {
+	    void *tmp;
+	    unsigned int newnum = 2 * (new_array->index + 1);
+	    tmp = grub_realloc (array->members, newnum
+				* sizeof (array->members[0]));
+	    if (!tmp)
+	      return grub_errno;
+	    array->members = tmp;
+	    grub_memset (array->members + array->allocated_devs,
+			 0, (newnum - array->allocated_devs)
+			 * sizeof (array->members[0]));
+	    array->allocated_devs = newnum;
+	  }
+
         /* FIXME: Check whether the update time of the superblocks are
            the same.  */
 
@@ -502,7 +517,7 @@ insert_array (grub_disk_t disk, struct g
           grub_dprintf ("raid", "array->nr_devs > array->total_devs (%d)?!?",
 			array->total_devs);
 
-        if (array->device[new_array->index] != NULL)
+        if (array->members[new_array->index].device != NULL)
           /* We found multiple devices with the same number. Again,
              this shouldn't happen.  */
           grub_dprintf ("raid", "Found two disks with the number %d?!?",
@@ -525,8 +540,18 @@ insert_array (grub_disk_t disk, struct g
 
       *array = *new_array;
       array->nr_devs = 0;
-      grub_memset (&array->device, 0, sizeof (array->device));
-      grub_memset (&array->start_sector, 0, sizeof (array->start_sector));
+      array->allocated_devs = 32;
+      if (new_array->index >= array->allocated_devs)
+        array->allocated_devs = 2 * (new_array->index + 1);
+
+      array->members = grub_zalloc (array->allocated_devs
+                                    * sizeof (array->members[0]));
+
+      if (!array->members)
+        {
+          grub_free (new_array->uuid);
+          return grub_errno;
+        }
 
       if (! array->name)
 	{
@@ -571,6 +596,7 @@ insert_array (grub_disk_t disk, struct g
 	  array->name = grub_xasprintf ("md%d", array->number);
 	  if (! array->name)
 	    {
+	      grub_free (array->members);
 	      grub_free (array->uuid);
 	      grub_free (array);
 
@@ -586,6 +612,7 @@ insert_array (grub_disk_t disk, struct g
 
 	  if (! new_name)
 	    {
+	      grub_free (array->members);
 	      grub_free (array->uuid);
 	      grub_free (array);
 
@@ -610,8 +637,8 @@ insert_array (grub_disk_t disk, struct g
     }
 
   /* Add the device to the array. */
-  array->device[new_array->index] = disk;
-  array->start_sector[new_array->index] = start_sector;
+  array->members[new_array->index].device = disk;
+  array->members[new_array->index].start_sector = start_sector;
   array->nr_devs++;
 
   return 0;
@@ -628,14 +655,15 @@ free_array (void)
   while (array)
     {
       struct grub_raid_array *p;
-      int i;
+      unsigned int i;
 
       p = array;
       array = array->next;
 
-      for (i = 0; i < GRUB_RAID_MAX_DEVICES; i++)
-        if (p->device[i])
-          grub_disk_close (p->device[i]);
+      for (i = 0; i < p->allocated_devs; i++)
+        if (p->members[i].device)
+          grub_disk_close (p->members[i].device);
+      grub_free (p->members);
 
       grub_free (p->uuid);
       grub_free (p->name);

--- a/disk/raid5_recover.c
+++ b/disk/raid5_recover.c
@@ -45,7 +45,7 @@ grub_raid5_recover (struct grub_raid_arr
       if (i == disknr)
         continue;
 
-      err = grub_disk_read (array->device[i], sector, 0, size, buf2);
+      err = grub_disk_read (array->members[i].device, sector, 0, size, buf2);
 
       if (err)
         {

--- a/disk/raid6_recover.c
+++ b/disk/raid6_recover.c
@@ -118,8 +118,9 @@ grub_raid6_recover (struct grub_raid_arr
         bad1 = i;
       else
         {
-          if ((array->device[pos]) &&
-              (! grub_disk_read (array->device[pos], sector, 0, size, buf)))
+          if ((array->members[pos].device) &&
+              (! grub_disk_read (array->members[pos].device, sector,
+				 0, size, buf)))
             {
               grub_raid_block_xor (pbuf, buf, size);
               grub_raid_block_mul (raid6_table2[i][i], buf, size);
@@ -148,21 +149,21 @@ grub_raid6_recover (struct grub_raid_arr
   if (bad2 < 0)
     {
       /* One bad device */
-      if ((array->device[p]) &&
-          (! grub_disk_read (array->device[p], sector, 0, size, buf)))
+      if ((array->members[p].device) &&
+          (! grub_disk_read (array->members[p].device, sector, 0, size, buf)))
         {
           grub_raid_block_xor (buf, pbuf, size);
           goto quit;
         }
 
-      if (! array->device[q])
+      if (! array->members[q].device)
         {
           grub_error (GRUB_ERR_READ_ERROR, "not enough disk to restore");
           goto quit;
         }
 
       grub_errno = GRUB_ERR_NONE;
-      if (grub_disk_read (array->device[q], sector, 0, size, buf))
+      if (grub_disk_read (array->members[q].device, sector, 0, size, buf))
         goto quit;
 
       grub_raid_block_xor (buf, qbuf, size);
@@ -174,18 +175,18 @@ grub_raid6_recover (struct grub_raid_arr
       /* Two bad devices */
       grub_uint8_t c;
 
-      if ((! array->device[p]) || (! array->device[q]))
+      if ((! array->members[p].device) || (! array->members[q].device))
         {
           grub_error (GRUB_ERR_READ_ERROR, "not enough disk to restore");
           goto quit;
         }
 
-      if (grub_disk_read (array->device[p], sector, 0, size, buf))
+      if (grub_disk_read (array->members[p].device, sector, 0, size, buf))
         goto quit;
 
       grub_raid_block_xor (pbuf, buf, size);
 
-      if (grub_disk_read (array->device[q], sector, 0, size, buf))
+      if (grub_disk_read (array->members[q].device, sector, 0, size, buf))
         goto quit;
 
       grub_raid_block_xor (qbuf, buf, size);

--- a/include/grub/raid.h
+++ b/include/grub/raid.h
@@ -22,8 +22,6 @@
 
 #include <grub/types.h>
 
-#define GRUB_RAID_MAX_DEVICES	32
-
 #define GRUB_RAID_LAYOUT_LEFT_ASYMMETRIC	0
 #define GRUB_RAID_LAYOUT_RIGHT_ASYMMETRIC	1
 #define GRUB_RAID_LAYOUT_LEFT_SYMMETRIC		2
@@ -32,6 +30,13 @@
 #define GRUB_RAID_LAYOUT_RIGHT_MASK		1
 #define GRUB_RAID_LAYOUT_SYMMETRIC_MASK		2
 
+struct grub_raid_member
+{
+  grub_disk_t device;  /* Array of total_devs devices. */
+  grub_disk_addr_t start_sector;
+  /* Start of each device, in 512 byte sectors. */
+};
+
 struct grub_raid_array
 {
   int number;              /* The device number, taken from md_minor so we
@@ -43,16 +48,15 @@ struct grub_raid_array
   grub_size_t chunk_size;  /* The size of a chunk, in 512 byte sectors. */
   grub_uint64_t disk_size; /* Size of an individual disk, in 512 byte
 			      sectors. */
-  int index;               /* Index of current device.  */
+  unsigned int index;               /* Index of current device.  */
   int uuid_len;            /* The length of uuid.  */
   char *uuid;              /* The UUID of the device. */
 
   /* The following field is setup by the caller.  */
   char *name;              /* That will be "md<number>". */
   unsigned int nr_devs;    /* The number of devices we've found so far. */
-  grub_disk_t device[GRUB_RAID_MAX_DEVICES];  /* Array of total_devs devices. */
-  grub_disk_addr_t start_sector[GRUB_RAID_MAX_DEVICES];
-			   /* Start of each device, in 512 byte sectors. */
+  unsigned int allocated_devs;
+  struct grub_raid_member *members;
   struct grub_raid_array *next;
 };
 
