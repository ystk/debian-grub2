#!/usr/bin/make -f
SHELL		:= bash

deb_version		:= $(shell dpkg-parsechangelog | sed -ne "s/^Version: \(.*\)/\1/p")
upstream_version	:= $(shell echo $(deb_version) | sed -e "s/-[^-]*$$//")

package		:= grub2

DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH 2>/dev/null)
DEB_HOST_ARCH_OS ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_OS 2>/dev/null)
DEB_HOST_ARCH_CPU ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU 2>/dev/null)

HOST_CFLAGS := -g -Wall

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	HOST_CFLAGS += -O0
else
	HOST_CFLAGS += -O2
endif

unexport CFLAGS
export HOST_CFLAGS
export TARGET_CPPFLAGS := -Wno-unused-but-set-variable

ifeq (,$(shell which qemu-system-i386 2>/dev/null))
with_check := no
else
with_check := yes
endif

CC := gcc-4.6

# Enable external modules from grub-extras.
export GRUB_CONTRIB := $(CURDIR)/debian/grub-extras

confflags = PACKAGE_VERSION="$(deb_version)" PACKAGE_STRING="GRUB $(deb_version)" CC=$(CC) TARGET_CC=$(CC) --enable-grub-mkfont

AUTOGEN_DEB_FILES = config templates preinst postinst postrm dirs install links

BUILD_PACKAGES := $(strip $(shell dh_listpackages))
REAL_PACKAGES = grub-emu grub-pc grub-coreboot grub-efi-ia32 grub-efi-amd64 grub-ieee1275 grub-firmware-qemu grub-yeeloong

ifneq (,$(filter i386 amd64,$(DEB_HOST_ARCH_CPU)))
COMMON_PLATFORM := pc
else ifneq (,$(filter powerpc ppc64 sparc,$(DEB_HOST_ARCH_CPU)))
COMMON_PLATFORM := ieee1275
else ifeq (mipsel,$(DEB_HOST_ARCH_CPU))
COMMON_PLATFORM := yeeloong
else
$(error COMMON_PLATFORM not set for $(DEB_HOST_ARCH_CPU))
endif

%:
	dh $@ --with quilt

override_dh_auto_configure: $(patsubst %,configure/%,$(BUILD_PACKAGES))

override_dh_auto_build: $(patsubst %,build/%,$(BUILD_PACKAGES))

override_dh_auto_install: $(patsubst %,install/%,$(BUILD_PACKAGES))

$(patsubst %,configure/%,$(REAL_PACKAGES)) :: configure/% : build/stamps/configure-%
$(patsubst %,build/%,$(REAL_PACKAGES) grub-rescue-pc) :: build/% : build/stamps/build-%

build/stamps/configure-%: package = $(subst build/stamps/configure-,,$@)
build/stamps/configure-%: export DH_OPTIONS = -p$(package) -Bbuild/$(package)

build/stamps/build-%: package = $(subst build/stamps/build-,,$@)
build/stamps/build-%: export DH_OPTIONS = -p$(package) -Bbuild/$(package)

install/%: package = $(subst install/,,$@)
install/%: package_bin = $(package)-bin
install/grub-emu: package_bin = grub-emu
install/%: export DH_OPTIONS = -p$(package) -Bbuild/$(patsubst grub-common,grub-$(COMMON_PLATFORM),$(package))

override_dh_quilt_patch:
	dh_quilt_patch
	rm -f build/stamps/autogen

override_dh_quilt_unpatch:
	dh_quilt_unpatch
	rm -f build/stamps/autogen
	# workaround for quilt < 0.60
	touch grub-core/lib/posix_wrap/limits.h

build/stamps/autogen: autogen.sh configure.ac Makefile.util.def grub-core/Makefile.core.def
	mkdir -p build/stamps
	./autogen.sh
	touch $@

build/stamps/configure-grub-common: build/stamps/configure-grub-$(COMMON_PLATFORM)

build/stamps/build-grub-common: build/stamps/build-grub-$(COMMON_PLATFORM)

build/stamps/configure-grub-pc build/stamps/configure-grub-ieee1275 build/stamps/configure-grub-coreboot build/stamps/configure-grub-emu build/stamps/configure-grub-yeeloong: build/stamps/autogen
	mkdir -p build/stamps build/$(package)
	dh_auto_configure -- $(confflags) --with-platform=$(subst grub-,,$(package))
	touch $@

# This name scheme leaves room for things like ia64 or amd32 someday
build/stamps/configure-grub-efi-ia32: build/stamps/autogen
	mkdir -p build/stamps build/$(package)
	dh_auto_configure -- $(confflags) --with-platform=efi --target=i386-pe --program-prefix=""
	touch $@
build/stamps/configure-grub-efi-amd64: build/stamps/autogen
	mkdir -p build/stamps $(subst build/stamps/configure-,build/,$@)
	dh_auto_configure -- $(confflags) --with-platform=efi --target=amd64-pe --program-prefix=""
	touch $@

build/stamps/configure-grub-firmware-qemu: build/stamps/autogen
	mkdir -p build/stamps $(subst build/stamps/configure-,build/,$@)
	dh_auto_configure -- $(confflags) --with-platform=qemu
	touch $@

build/stamps/build-grub-efi-ia32 build/stamps/build-grub-efi-amd64 build/stamps/build-grub-ieee1275 build/stamps/build-grub-coreboot build/stamps/build-grub-emu build/stamps/build-grub-yeeloong: build/stamps/build-%: build/stamps/configure-%
	dh_auto_build
	touch $@

build/stamps/build-grub-pc: build/stamps/configure-grub-pc
	dh_auto_build
ifeq ($(with_check), yes)
	PATH="$$PATH:/sbin:/usr/sbin" dh_auto_test
endif
	touch $@

build/stamps/build-grub-firmware-qemu: build/stamps/configure-grub-firmware-qemu
	dh_auto_build
	grub_dir=`mktemp -d` ; \
	grub_memdisk=`mktemp` ; \
	trap "rm -rf $${grub_dir} $${grub_memdisk}" EXIT HUP INT QUIT TERM ; \
	mkdir -p $${grub_dir}/boot/grub ; \
	cp debian/grub-firmware-qemu_grub.cfg $${grub_dir}/boot/grub/grub.cfg ; \
	tar -cf - -C $${grub_dir} boot > $${grub_memdisk} ; \
	$(CURDIR)/build/$(package)/grub-mkimage \
		-O i386-qemu \
		-d $(CURDIR)/build/$(package)/grub-core \
		$(CURDIR)/build/$(package)/grub-core/*.mod \
		-m $${grub_memdisk} \
		-o $(CURDIR)/build/$(package)/grub.bin
	touch $@

build/stamps/build-grub-rescue-pc: build/stamps/build-grub-pc
	mkdir -p build/grub-rescue-pc
	cp -a build/grub-pc/grub-mkrescue build/grub-rescue-pc/grub-mkrescue
	mkdir -p build/grub-rescue-pc/rescue-disk/boot/grub
	cp docs/grub.cfg build/grub-rescue-pc/rescue-disk/boot/grub/
	sed -i 's,^prefix=.*,prefix=$(CURDIR)/build/grub-rescue-pc,' \
		build/grub-rescue-pc/grub-mkrescue
	mkdir -p build/grub-rescue-pc/lib/grub
	rm -rf build/grub-rescue-pc/lib/grub/i386-pc
	cp -a build/grub-pc/grub-core build/grub-rescue-pc/lib/grub/i386-pc
	$(CURDIR)/build/grub-rescue-pc/grub-mkrescue \
		--grub-mkimage=$(CURDIR)/build/grub-pc/grub-mkimage \
		--output=$(CURDIR)/build/grub-rescue-pc/grub-rescue-cdrom.iso \
		$(CURDIR)/build/grub-rescue-pc/rescue-disk
	# save space for floppy image
	rm -rf build/grub-rescue-pc/lib/grub/i386-pc/po
	$(CURDIR)/build/grub-rescue-pc/grub-mkrescue \
		--grub-mkimage=$(CURDIR)/build/grub-pc/grub-mkimage \
		--output=$(CURDIR)/build/grub-rescue-pc/grub-rescue-floppy.img \
		--diet \
		$(CURDIR)/build/grub-rescue-pc/rescue-disk
	touch $@

platform_subst = \
	if [ -e debian/$(1) ]; then \
		sed debian/$(1) \
			-e "s/@PACKAGE@/$(2)/g" \
			-e "s/@CPU_PLATFORM@/$$cpu_platform/g" \
			>> debian/$(2).$(3); \
	fi

install/grub-pc install/grub-efi-ia32 install/grub-efi-amd64 install/grub-ieee1275 install/grub-coreboot install/grub-emu install/grub-yeeloong:
	dh_auto_install --destdir=debian/tmp-$(package)

	if [ "$@" = "install/grub-emu" ] ; then \
		set -e ; \
		for i in $(AUTOGEN_DEB_FILES) ; do \
			> debian/$(package).$$i; \
			$(call platform_subst,$(package).$$i.in,$(package),$$i); \
			$(call platform_subst,$(package).$$i.$(DEB_HOST_ARCH_CPU).in,$(package),$$i); \
			$(call platform_subst,$(package).$$i.$(DEB_HOST_ARCH_OS).in,$(package),$$i); \
			[ -s debian/$(package).$$i ] || rm -f debian/$(package).$$i; \
			> debian/$(package_dbg).$$i; \
			$(call platform_subst,$(package_dbg).$$i.in,$(package_dbg),$$i); \
			$(call platform_subst,$(package_dbg).$$i.$(DEB_HOST_ARCH_CPU).in,$(package_dbg),$$i); \
			$(call platform_subst,$(package_dbg).$$i.$(DEB_HOST_ARCH_OS).in,$(package_dbg),$$i); \
			[ -s debian/$(package_dbg).$$i ] || rm -f debian/$(package_dbg).$$i; \
		done ; \
	else \
		set -e ; \
		cpu_platform=$$(find debian/tmp-$(package)/usr/lib/grub \
			-mindepth 1 -maxdepth 1 -type d -printf '%P\n') ; \
		for i in $(AUTOGEN_DEB_FILES) ; do \
			> debian/$(package).$$i; \
			$(call platform_subst,$$i.in,$(package),$$i); \
			$(call platform_subst,$(package).$$i.in,$(package),$$i); \
			$(call platform_subst,$(package).$$i.$(DEB_HOST_ARCH_CPU).in,$(package),$$i); \
			$(call platform_subst,$(package).$$i.$(DEB_HOST_ARCH_OS).in,$(package),$$i); \
			[ -s debian/$(package).$$i ] || rm -f debian/$(package).$$i; \
			> debian/$(package_bin).$$i; \
			$(call platform_subst,$$i-bin.in,$(package_bin),$$i); \
			$(call platform_subst,$(package_bin).$$i.in,$(package_bin),$$i); \
			$(call platform_subst,$(package_bin).$$i.$(DEB_HOST_ARCH_CPU).in,$(package_bin),$$i); \
			$(call platform_subst,$(package_bin).$$i.$(DEB_HOST_ARCH_OS).in,$(package_bin),$$i); \
			[ -s debian/$(package_bin).$$i ] || rm -f debian/$(package_bin).$$i; \
		done ; \
	fi

	mkdir -p $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides
	echo "$(package_bin): unstripped-binary-or-object *.mod" \
		>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin)
	cd debian/tmp-$(package) && find usr/lib/grub -name kernel.img \
		| sed -e "s%.*%$(package_bin): statically-linked-binary &%g" \
	>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin)
	cd debian/tmp-$(package) && find ./usr/lib/grub -name kernel.img \
		| sed -e "s%.*%$(package_bin): statically-linked-binary &%g" \
	>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin)
	cd debian/tmp-$(package) && find usr/lib/grub -name kernel.img \
		| sed -e "s%.*%$(package_bin): unstripped-binary-or-object &%g" \
	>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin)
	if [ "$@" = "install/grub-efi-amd64" ] && [ "$(DEB_HOST_ARCH_CPU)" = "i386" ] ; then \
		echo "$(package_bin): binary-from-other-architecture *.mod" \
			>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin) ; \
		cd debian/tmp-$(package) && find usr/lib/grub -name kernel.img \
			| sed -e "s%.*%$(package_bin): binary-from-other-architecture &%g" \
		>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin) ; \
	fi
	if ([ "$@" = "install/grub-pc" ] || \
	    [ "$@" = "install/grub-ieee1275" ] || \
	    [ "$@" = "install/grub-coreboot" ] || \
	    [ "$@" = "install/grub-emu" ]) && \
	   [ "$(DEB_HOST_ARCH_CPU)" = "i386" ] ; then \
		echo "$(package_bin): binary-from-other-architecture *efiemu64.o" \
			>> $(CURDIR)/debian/$(package_bin)/usr/share/lintian/overrides/$(package_bin) ; \
	fi

install/grub-common:
	set -e ; for i in $(AUTOGEN_DEB_FILES) ; do \
		if [ -e debian/grub-common.$$i.in ] ; then \
			cat debian/grub-common.$$i.in \
				> debian/grub-common.$$i ; \
		fi ; \
		if [ -e debian/grub-common.$$i.$(DEB_HOST_ARCH_CPU).in ] ; then \
			cat debian/grub-common.$$i.$(DEB_HOST_ARCH_CPU).in \
				>> debian/grub-common.$$i ; \
		fi ; \
		if [ -e debian/grub-common.$$i.$(DEB_HOST_ARCH_OS).in ] ; then \
			cat debian/grub-common.$$i.$(DEB_HOST_ARCH_OS).in \
				>> debian/grub-common.$$i ; \
		fi ; \
	done

override_dh_install:
	dh_install -pgrub2 -pgrub-linuxbios -pgrub-efi -pgrub-rescue-pc -pgrub-firmware-qemu
	set -e; for package in grub-common grub2-common grub-mount-udeb; do \
		dh_install -p$$package --sourcedir=debian/tmp-grub-$(COMMON_PLATFORM); \
	done
	rm -f debian/grub2-common/usr/share/info/dir*
	set -e; for package in grub-pc grub-efi-ia32 grub-efi-amd64 grub-ieee1275 grub-coreboot grub-yeeloong; do \
		dh_install -p$$package --sourcedir=debian/tmp-$$package; \
		dh_install -p$$package-bin --sourcedir=debian/tmp-$$package; \
	done
	dh_install -pgrub-emu --sourcedir=debian/tmp-grub-emu

override_dh_installdocs:
	dh_installdocs -pgrub-common -pgrub-rescue-pc -pgrub-firmware-qemu -A AUTHORS NEWS README THANKS TODO
	dh_installdocs -Ngrub-common -Ngrub-rescue-pc -Ngrub-firmware-qemu --link-doc=grub-common

override_dh_strip:
	dh_strip -X/usr/bin/grub-emu

override_dh_builddeb:
	dh_builddeb -- -Zxz

override_dh_auto_clean:
	-rm -rf build
	-rm -f contrib grub-core/contrib

override_dh_clean: debian/legacy/update-grub debian/grub-extras
	dh_clean

	chmod +x debian/{script,grub.d/*,legacy/*,kernel/*}

	for i in $(AUTOGEN_DEB_FILES) ; do \
		rm -f debian/grub-{pc,efi-*,ieee1275,coreboot,yeeloong,emu}{,-bin}.$$i ; \
	done
	rm -rf debian/tmp-*/

	# make sure PO files are always up-to-date
	debconf-updatepo

debian/legacy/update-grub:
	@echo "Missing $@.  Try: \"bzr cat http://bzr.debian.org/bzr/pkg-grub/trunk/grub-legacy/debian/update-grub > $@\""
	exit 1

debian/grub-extras:
	@echo "Missing $@.  Try: \"mkdir -p $@; for extra in 915resolution ntldr-img; do bzr export $@/\$$extra http://bzr.savannah.nongnu.org/r/grub-extras/\$$extra; done\""
	exit 1

.PHONY: $(patsubst %,configure/%,$(BUILD_PACKAGES)) $(patsubst %,build/%,$(BUILD_PACKAGES)) $(patsubst %,install/%,$(BUILD_PACKAGES))
